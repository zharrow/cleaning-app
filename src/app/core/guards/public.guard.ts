// ========================================
// src/app/core/guards/public.guard.ts
// ========================================
import { inject } from '@angular/core';
import { Router, CanActivateFn, UrlTree } from '@angular/router';
import { AuthService } from '../services/auth.service';

/**
 * Guard pour les pages publiques (login)
 * Redirige vers dashboard si l'utilisateur est d√©j√† connect√©
 */
export const publicGuard: CanActivateFn = async (route, state): Promise<boolean | UrlTree> => {
  const authService = inject(AuthService);
  const router = inject(Router);
  
  console.log('üîì Public Guard: V√©rification pour', state.url);
  
  try {
    // Attendre que Firebase ait v√©rifi√© l'√©tat
    const isAuthenticated = await authService.waitForAuthCheck();
    
    if (isAuthenticated) {
      console.log('‚û°Ô∏è Public Guard: D√©j√† connect√©, redirection vers dashboard');
      
      // Si un returnUrl est pr√©sent, l'utiliser
      const returnUrl = route.queryParams['returnUrl'] || '/dashboard';
      return router.createUrlTree([returnUrl]);
    }
    
    console.log('‚úÖ Public Guard: Acc√®s √† la page publique autoris√©');
    return true;
  } catch (error) {
    console.error('‚ö†Ô∏è Public Guard: Erreur, autorisation de l\'acc√®s', error);
    
    // En cas d'erreur, autoriser l'acc√®s √† la page publique
    return true;
  }
};