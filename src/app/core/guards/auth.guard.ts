// ========================================
// src/app/core/guards/auth.guard.ts
// ========================================
import { inject } from '@angular/core';
import { Router, CanActivateFn, UrlTree } from '@angular/router';
import { AuthService } from '../services/auth.service';

/**
 * Guard pour prot√©ger les routes n√©cessitant une authentification
 * Attend que Firebase ait v√©rifi√© l'√©tat avant de rediriger
 */
export const authGuard: CanActivateFn = async (route, state): Promise<boolean | UrlTree> => {
  const authService = inject(AuthService);
  const router = inject(Router);
  
  console.log('üõ°Ô∏è Guard: V√©rification pour', state.url);
  
  try {
    // Attendre que Firebase ait v√©rifi√© l'√©tat d'authentification
    const isAuthenticated = await authService.waitForAuthCheck();
    
    if (isAuthenticated) {
      console.log('‚úÖ Guard: Acc√®s autoris√©');
      return true;
    }
    
    console.log('‚ùå Guard: Non authentifi√©, redirection vers login');
    
    // Cr√©er l'URL de redirection avec le returnUrl
    return router.createUrlTree(['/login'], {
      queryParams: { returnUrl: state.url }
    });
  } catch (error) {
    console.error('‚ùå Guard: Erreur lors de la v√©rification', error);
    
    // En cas d'erreur, rediriger vers login par s√©curit√©
    return router.createUrlTree(['/login']);
  }
};